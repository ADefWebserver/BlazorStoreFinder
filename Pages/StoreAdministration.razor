@page "/storeadmin"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.Text;
@using NetTopologySuite.Geometries
@using Newtonsoft.Json
@inject StoreLocationService _StoreLocationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in StoreLocationService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access StoreLocationService using @Service
*@
@inherits OwningComponentBase<StoreLocationService>
<h3>Store Administration</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@storelocations" Toolbar="@(new List<string>() { "Add", "Delete", "Cancel" })" AllowPaging="true">
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="StoreLocations"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowDeleting="true" Mode="@EditMode.Dialog" Dialog="DialogParams">
                    <Template>
                        @{
                            var Store = (context as StoreLocations);
                        }
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <SfTextBox ID="Location Name" @bind-Value="@(Store.LocationName)" TValue="string" FloatLabelType="FloatLabelType.Always" Placeholder="Location Name"></SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <SfTextBox ID="Address" @bind-Value="@(Store.LocationAddress)" TValue="string" FloatLabelType="FloatLabelType.Always" Placeholder="Address"></SfTextBox>
                                </div>
                            </div>
                        </div>
                    </Template>
                </GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(StoreLocations.Id) HeaderText="Id" IsPrimaryKey="true" ValidationRules="@(new ValidationRules{ Number=true})" TextAlign="TextAlign.Left" Width="50"></GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationName) HeaderText="Location Name" ValidationRules="@(new ValidationRules{ Required=true})" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationAddress) HeaderText="Address" ValidationRules="@(new ValidationRules{ Required=true})"></GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationLatitude) HeaderText="Latitude" Width="150"></GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationLongitude) HeaderText="Longitude" Width="150"></GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    string LocationName = "";
    string LocationAddress = "";
    List<StoreLocations> storelocations = new List<StoreLocations>();

    private Boolean Check = false;
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };

    protected override async Task OnInitializedAsync()
    {
        // We access StoreLocationService using @Service
        storelocations = await @Service.GetStoreLocations();
    }

    public async Task ActionBeginHandler(ActionEventArgs<StoreLocations> args)
    {
        if (args.RequestType.ToString() == "Save")
        {
            LocationName = args.Data.LocationName;
            LocationAddress = args.Data.LocationAddress;
            await Save();
        }
    }

    public async Task Save()
    {
        // Geocode address
        Coordinate coordinate = await GeocodeAddress(LocationAddress);

        // Crate a new store location
        StoreLocations store = new StoreLocations();
        store.LocationName = LocationName;
        store.LocationAddress = LocationAddress;
        store.LocationLatitude = coordinate.Y.ToString();
        store.LocationLongitude = coordinate.X.ToString();
        store.LocationData = new Point(coordinate) { SRID = 4326 };

        // Save a new store location
        var result = await @Service.AddStoreLocation(store);

        // Reload the store locations
        storelocations = await @Service.GetStoreLocations();
    }

    // Utility

    public async Task<Coordinate> GeocodeAddress(string address)
    {
        Coordinate coordinate = new Coordinate();

        // Create a HTTP Client to make the REST call
        using (var client = new System.Net.Http.HttpClient())
        {
            // Get a Access Token from AuthService
            var AccessToken = await AuthService.GetAccessToken();

            client.DefaultRequestHeaders.Accept.Clear();
            client.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("application/json"));
            // Pass the Azure Maps Client Id
            client.DefaultRequestHeaders.Add("x-ms-client-id", AuthService.ClientId);
            // Pass the Access Token in the auth header
            client.DefaultRequestHeaders.Authorization =
            new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", AccessToken);

            // Build the URL
            StringBuilder sb = new StringBuilder();

            // Request a address search
            // See: https://docs.microsoft.com/en-us/rest/api/maps/search/get-search-address
            sb.Append("https://atlas.microsoft.com/search/address/json?");
            // Specify the api version and language
            sb.Append("&api-version=1.0&language=en-US");
            // Pass address
            sb.Append($"&query={address}");

            // Set the URL
            var url = new Uri(sb.ToString());

            // Call Azure maps and get the repsonse
            var Response = await client.GetAsync(url);

            // Read the response
            var responseContent = await Response.Content.ReadAsStringAsync();
            var AddressResult = JsonConvert.DeserializeObject<SearchAddressResult>(responseContent);

            // Create coordinate
            coordinate = new Coordinate(
                Convert.ToDouble(AddressResult.results.FirstOrDefault()?.position.lon),
                Convert.ToDouble(AddressResult.results.FirstOrDefault()?.position.lat));
        }

        return coordinate;
    }
}
