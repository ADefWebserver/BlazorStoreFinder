@page "/storeadmin"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.DropDowns
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Popups
@using System.Text;
@using NetTopologySuite.Geometries
@using Newtonsoft.Json
@using System.Net.Http.Headers
@inject StoreLocationService _StoreLocationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in StoreLocationService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access StoreLocationService using Service
*@
@inherits OwningComponentBase<StoreLocationService>
<h3>Store Administration</h3>

<div class="col-lg-12 control-section">
    <div class="content-wrapper">
        <div class="row">
            <SfGrid DataSource="@storelocations"
                    Toolbar="@(new List<string>() { "Add", "Delete" })" AllowPaging="true">
                <GridEvents OnActionBegin="ActionBeginHandler" TValue="StoreLocations"></GridEvents>
                <GridEditSettings AllowAdding="true" AllowDeleting="true"
                                  Mode="@EditMode.Dialog" Dialog="DialogParams">
                    <Template>
                        @{
                            var Store = (context as StoreLocations) ?? new StoreLocations();
                        }
                        <div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <SfTextBox ID="Location Name" @bind-Value="@(Store.LocationName)"
                                               TValue="string" FloatLabelType="FloatLabelType.Always"
                                               Placeholder="Location Name"></SfTextBox>
                                </div>
                            </div>
                            <div class="form-row">
                                <div class="form-group col-md-12">
                                    <SfTextBox ID="Address" @bind-Value="@(Store.LocationAddress)"
                                               TValue="string" FloatLabelType="FloatLabelType.Always"
                                               Placeholder="Address"></SfTextBox>
                                </div>
                            </div>
                        </div>
                    </Template>
                </GridEditSettings>
                <GridColumns>
                    <GridColumn Field=@nameof(StoreLocations.Id) HeaderText="Id" IsPrimaryKey="true"
                                ValidationRules="@(new ValidationRules{ Number=true})" Width="50">
                    </GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationName) HeaderText="Location Name"
                                ValidationRules="@(new ValidationRules{ Required=true})" Width="150">
                    </GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationAddress) HeaderText="Address"
                                ValidationRules="@(new ValidationRules{ Required=true})">
                    </GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationLatitude) HeaderText="Latitude" Width="150">
                    </GridColumn>
                    <GridColumn Field=@nameof(StoreLocations.LocationLongitude) HeaderText="Longitude" Width="150">
                    </GridColumn>
                </GridColumns>
            </SfGrid>
        </div>
    </div>
</div>

@code {
    List<StoreLocations> storelocations = new List<StoreLocations>();
    private DialogSettings DialogParams = new DialogSettings { MinHeight = "250px", Width = "450px" };

    protected override async Task OnInitializedAsync()
    {
        // We access StoreLocationService using @Service
        storelocations = await Service.GetStoreLocations();
    }

    public async Task ActionBeginHandler(ActionEventArgs<StoreLocations> args)
    {
        if (args.RequestType.ToString() == "Save")
        {
            await Save(args.Data);
        }

        if (args.RequestType.ToString() == "Delete")
        {
            await Delete(args.Data);
        }
    }

    public async Task Delete(StoreLocations store)
    {
        await Service.DeleteStoreLocation(store.Id);
        storelocations = await Service.GetStoreLocations();
    }

    public async Task Save(StoreLocations store)
    {
        // Geocode address
        Coordinate coordinate = await Service.GeocodeAddress(store.LocationAddress);

        // Create a new store location
        store.LocationLatitude = coordinate.Y.ToString();
        store.LocationLongitude = coordinate.X.ToString();
        
        // SRID 4326 (WGS 84) is the most standard in cartography and GPS systems
        store.LocationData = new Point(coordinate) { SRID = 4326 };

        // Save a new store location
        await Service.AddStoreLocation(store);
    }
}