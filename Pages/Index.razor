@page "/"
@using BlazorStoreFinder
@using NetTopologySuite.Geometries
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.SplitButtons
@using Darnton.Blazor.DeviceInterop.Geolocation;
@inject IGeolocationService GeolocationService
@inject StoreLocationService _StoreLocationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in StoreLocationService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access StoreLocationService using Service
*@
@inherits OwningComponentBase<StoreLocationService>
<h4>Blazor Store Finder</h4>

<SfDashboardLayout Columns="4" AllowResizing="true">
    <DashboardLayoutPanels>
        <DashboardLayoutPanel Id="Search" Row="0" Column="0" SizeX=1 SizeY=3>
            <HeaderTemplate>Search</HeaderTemplate>
            <ContentTemplate>
                <div class="row" style="margin-left:2px;">
                    <div class="col-xs-9 col-sm-9 col-lg-9 col-md-9" style="margin-top:10px;">
                        <SfTextBox Placeholder="Location" @bind-Value="CurrentLocation"></SfTextBox>
                    </div>
                    <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                        <button class="e-control e-btn e-lib" @onclick="Search" style="width:auto; margin-top:8px;">
                            <span class="oi oi-magnifying-glass"></span>
                        </button>
                    </div>
                </div>
            </ContentTemplate>
        </DashboardLayoutPanel>
        <DashboardLayoutPanel Id="Map" Row="0" Column="1" SizeX=3 SizeY=3>
            <HeaderTemplate>Map</HeaderTemplate>
        </DashboardLayoutPanel>
    </DashboardLayoutPanels>
</SfDashboardLayout>

@code {
    protected GeolocationResult? CurrentPositionResult { get; set; }
    List<StoreSearchResult> colStoreLocations = new List<StoreSearchResult>();
    Coordinate CurrentCoordinate = new Coordinate();
    string CurrentLocation = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get current location
            // will cause a popup to show to ask permission
            CurrentPositionResult = await GeolocationService.GetCurrentPosition();

            if (CurrentPositionResult.IsSuccess)
            {
                // Get latitude and longitude
                string? CurrentLatitude =
                CurrentPositionResult.Position?.Coords?.Latitude.ToString("F2");

                string? CurrentLongitude =
                CurrentPositionResult.Position?.Coords?.Longitude.ToString("F2");

                // Set latitude and longitude
                // (to be consumed by GetTile() method)
                if (CurrentLatitude != null && CurrentLongitude != null)
                {
                    CurrentCoordinate.X = Convert.ToDouble(CurrentLatitude);
                    CurrentCoordinate.Y = Convert.ToDouble(CurrentLongitude);

                    // Reverse Geocode coordinate and set location
                    var SearchAddressResult = await Service.GeocodeReverse(CurrentCoordinate);

                    if (SearchAddressResult.addresses[0].address.freeformAddress != null)
                    {
                        CurrentLocation = SearchAddressResult.addresses[0].address.freeformAddress;
                    }
                }

                StateHasChanged();
            }
        }
    }

    public async Task Search()
    {
        // Clear Location results
        colStoreLocations = new List<StoreSearchResult>();
        
        // Geocode address
        Coordinate CurrentCoordinate = await Service.GeocodeAddress(CurrentLocation);

        if (CurrentCoordinate != null)
        {
            // Find Nearby Stores
            colStoreLocations = await Service.GetNearbyStoreLocations(CurrentCoordinate);
        }
    }
}