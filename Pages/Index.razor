@page "/"
@using BlazorStoreFinder
@using NetTopologySuite.Geometries
@using Syncfusion.Blazor.Layouts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.Lists
@using Darnton.Blazor.DeviceInterop.Geolocation;
@using AzureMapsControl.Components.Map
@inject IGeolocationService GeolocationService
@inject StoreLocationService _StoreLocationService
@*
    Using OwningComponentBase ensures that the service and related services
    that share its scope are disposed with the component.
    Otherwise DbContext in StoreLocationService will live for the life of the
    connection, which may be problematic if clients stay
    connected for a long time.
    We access StoreLocationService using Service
*@
@inherits OwningComponentBase<StoreLocationService>
<h4>Blazor Store Finder</h4>
<div class="row" style="width:1500px">
    <div class="col-xs-2 col-sm-2 col-lg-2 col-md-2">
        <div class="row">
            <div class="col-xs-9 col-sm-9 col-lg-9 col-md-9" style="margin-top:10px;">
                <SfTextBox Placeholder="Location" @bind-Value="CurrentLocation"></SfTextBox>
            </div>
            <div class="col-xs-3 col-sm-3 col-lg-3 col-md-3">
                @if (searching)
                {
                    <div class="spinner-border text-primary" role="status"
                     style="margin-top:8px;"></div>
                }
                else
                {
                    <button class="e-control e-btn e-lib" @onclick="Search"
                        style="width:auto; margin-top:8px;">
                        <span class="oi oi-magnifying-glass"></span>
                    </button>
                }
            </div>
        </div>
        <br />
        @if (colStoreLocations.Count > 0)
        {
            <SfListView @ref="StoreSearchResultListBox" DataSource="@colStoreLocations"
                    Height="450px" CssClass="e-list-template listview-template">
                <ListViewFieldSettings TValue="StoreSearchResult" Id="LocationName"
                                   Text="Text" Child="Child"></ListViewFieldSettings>
                <ListViewTemplates TValue="StoreSearchResult">
                    <Template>
                        @{
                        StoreSearchResult currentData = (StoreSearchResult)context;

                        <div class="e-list-wrapper e-list-avatar e-list-multi-line"
                             @onclick="(e => OnStoreSelect(currentData))">

                            <span class="e-avatar"><span class="oi oi-globe"></span></span>
                            <span class="e-list-item-header">@currentData.LocationName</span>
                            <span class="e-list-item-header">@currentData.LocationAddress</span>
                            <span class="e-list-content">
                                @currentData.Distance.ToString("F") miles
                            </span>

                        </div>
                    }
                </Template>
            </ListViewTemplates>
        </SfListView>
        }
    </div>

    <div class="col-xs-10 col-sm-10 col-lg-10 col-md-10">
        <AzureMap Id="map"
                  CameraOptions="new CameraOptions { Zoom = 10 }"
                  StyleOptions="new StyleOptions { ShowLogo = false, ShowFeedbackLink = false }"
                  EventActivationFlags="MapEventActivationFlags.None().Enable(MapEventType.Ready)"
                  OnReady="OnMapReadyAsync" />
    </div>
</div>
@code {
    MapEventArgs? myMap;
    SfListView<StoreSearchResult>? StoreSearchResultListBox;
    protected GeolocationResult? CurrentPositionResult { get; set; }
    List<StoreSearchResult> colStoreLocations = new List<StoreSearchResult>();
    Coordinate CurrentCoordinate = new Coordinate();
    string CurrentLocation = "";
    bool searching = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Get current location
            // will cause a popup to show to ask permission
            CurrentPositionResult = await GeolocationService.GetCurrentPosition();

            if (CurrentPositionResult.IsSuccess)
            {
                // Get latitude and longitude
                string? CurrentLatitude =
                CurrentPositionResult.Position?.Coords?.Latitude.ToString("F2");

                string? CurrentLongitude =
                CurrentPositionResult.Position?.Coords?.Longitude.ToString("F2");

                // Set latitude and longitude
                // (to be consumed by GetTile() method)
                if (CurrentLatitude != null && CurrentLongitude != null)
                {
                    CurrentCoordinate.X = Convert.ToDouble(CurrentLatitude);
                    CurrentCoordinate.Y = Convert.ToDouble(CurrentLongitude);

                    // Reverse Geocode coordinate and set location
                    var SearchAddressResult = await Service.GeocodeReverse(CurrentCoordinate);

                    if (SearchAddressResult.addresses[0].address.freeformAddress != null)
                    {
                        CurrentLocation = SearchAddressResult.addresses[0].address.freeformAddress;
                        
                        // Search for nearby Stores
                        await Search();
                    }
                }

                StateHasChanged();
            }
        }
    }

    public async Task OnMapReadyAsync(MapEventArgs eventArgs)
    {
        await Task.Run(() => myMap = eventArgs);
    }

    public async Task Search()
    {
        searching = true;
        StateHasChanged();

        // Clear Location results
        colStoreLocations = new List<StoreSearchResult>();

        // Geocode address
        Coordinate CurrentCoordinate = await Service.GeocodeAddress(CurrentLocation);

        if (CurrentCoordinate != null)
        {
            // Find Nearby Stores
            colStoreLocations = Service.GetNearbyStoreLocations(CurrentCoordinate);
        }

        searching = false;
        StateHasChanged();

        if (myMap != null && CurrentCoordinate != null)
        {
            // Center Map to curent location
            await myMap.Map.SetCameraOptionsAsync(
                    options => options.Center =
                    new AzureMapsControl.Components.Atlas.Position
                    (CurrentCoordinate.X, CurrentCoordinate.Y));

            // Add icon for current location
            await myMap.Map.ClearHtmlMarkersAsync();

            var HomeIcon = new AzureMapsControl.Components.Markers.HtmlMarker(
                new AzureMapsControl.Components.Markers.HtmlMarkerOptions
                    {
                        Position = new AzureMapsControl.Components.Atlas
                            .Position(CurrentCoordinate.X, CurrentCoordinate.Y),

                        Draggable = false,
                        Color = "#FF0000"
                    });

            await myMap.Map.AddHtmlMarkersAsync(HomeIcon);

            // Add icons for search results
            foreach (var store in colStoreLocations)
            {
                var StoreIcon = new AzureMapsControl.Components.Markers.HtmlMarker(
                    new AzureMapsControl.Components.Markers.HtmlMarkerOptions
                        {
                            Position = new AzureMapsControl.Components.Atlas
                                .Position(store.LocationLongitude, store.LocationLatitude),

                            Draggable = false,
                            Color = "#0000FF"
                        });

                await myMap.Map.AddHtmlMarkersAsync(StoreIcon);
            }
        }

    }

    async Task OnStoreSelect(StoreSearchResult SearchResult)
    {
        // Get selected Store
        var Selected = SearchResult;

        // Center map on store
        if (myMap != null && CurrentCoordinate != null)
        {
            await myMap.Map.SetCameraOptionsAsync(
                    options => options.Center =
                    new AzureMapsControl.Components.Atlas.Position
                    (SearchResult.LocationLongitude, SearchResult.LocationLatitude));
        }
    }
}